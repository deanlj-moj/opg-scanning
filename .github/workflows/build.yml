name: "[Build]"

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  security-events: write
  actions: read
  checks: read
  deployments: none
  issues: none
  packages: none
  pull-requests: read
  repository-projects: none
  statuses: none

jobs:
  # generate a branch name
  branch_name:
    name: "Generate a safe branch name"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/data-parse-branch-name.yml@v3.6.0

  # generate workspace name
  workspace_name:
    name: "Generate the workspace name"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/data-parse-workspace.yml@v3.6.0

  # SAST
  # codeql for go
  codeql_analysis:
    name: "Run CodeQL against the code base"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/analysis-application-codeql-sast-to-github-security.yml@v3.6.0
    with:
      application_languages: '["go"]'

  go-lint:
    name: Go Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: make go-lint
        continue-on-error: true
      - name: Upload golangci-lint results to GitHub Security tab
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "test-results/go-lint.sarif"
          category: golangci-lint
          checkout_path: service-app

  gosec:
    name: Go Sec
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: make gosec
        continue-on-error: true
      - name: Upload GoSec results to GitHub Security tab
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "test-results/gosec.sarif"
          category: gosec
          checkout_path: service-app

  # Unit test
  unit-test:
    name: Unit test
    runs-on: ubuntu-latest
    needs:
      - branch_name
      - semver_tag
    steps:
      - uses: actions/checkout@v4
      - run: make test
      - name: Get commit SHA
        id: get_commit
        run: |
          if [ "${{ github.head_ref }}" == "" ]; then
              echo "COMMIT=${{github.sha}}" >> $GITHUB_OUTPUT
          else
              echo "COMMIT=${{github.event.pull_request.head.sha}}" >> $GITHUB_OUTPUT
          fi
      # Upload to Pact broker
      - name: Publish pacts
        run: |
          docker run --rm -v $(pwd)/service-app/internal/api/pacts/scanning-sirius.json:/tmp/pacts pactfoundation/pact-cli:latest \
            pact-broker publish /tmp/pacts \
            --consumer-app-version ${{ steps.get_commit.outputs.COMMIT }} \
            --branch ${{ needs.branch_name.outputs.branch_name }} \
            --tag ${{ needs.semver_tag.outputs.tag }} \
            --broker-base-url https://pact-broker.api.opg.service.justice.gov.uk \
            --broker-username admin \
            --broker-password ${{ secrets.PACT_BROKER_PASSWORD }}

  # Integration test
  integration-test:
    name: Integration test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: make integration-test
      - run: make clean
        if: ${{ always() }}

  # generate tag
  semver_tag:
    needs: [branch_name]
    name: "Generate the semver tag value"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/data-parse-semver-tag.yml@v3.6.0
    with:
      branch_name: ${{ needs.branch_name.outputs.safe }}
    secrets: inherit

  # Docker build, trivy scan, ECR push as a matrix
  # The matrix loops over each app to build in a complicated
  # structure
  build_scan_push:
    name: "Docker build, trivy scan, ECR push"
    runs-on: ubuntu-latest
    # require all steps before this matrix to have passed
    needs:
      [
        branch_name,
        workspace_name,
        semver_tag,
        gosec,
        go-lint,
        codeql_analysis,
        unit-test,
        integration-test,
      ]
    strategy:
      fail-fast: true
      matrix:
        # services to scan over
        data:
          - docker_build_directory: "./service-app"
            image_app_name: "service-app"
    # we use these a few times, so its easier to generate them once and env
    # vars are visible in the output, so helps with debug
    env:
      local_docker_image: ${{ matrix.data.image_app_name }}:latest
      sarif_file: trivy-results.sarif
    steps:
      - uses: actions/checkout@v4
      - name: Show environment values
        run: |
          echo "local_docker_image: ${{ env.local_docker_image }}"
          echo "sarif_file: ${{ env.sarif_file }}"
      # build our sample docker image
      - name: Docker build
        # set the working directory to the variable
        working-directory: ${{ matrix.data.docker_build_directory }}
        run: |
          docker build -t ${{ env.local_docker_image }} .
      # log in to ECR
      - name: Configure AWS Credentials With Assumed Role to Management
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          # management account role
          role-to-assume: arn:aws:iam::311462405659:role/sirius-actions-ci
          role-duration-seconds: 900
          role-session-name: OPGScanningWorkflowGithubAction
      - name: ECR Login
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1
        with:
          registries: 311462405659
      # to check if things worked, output docker image list
      - name: Docker image list
        run: |
          docker images
      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.29.0
        env:
          TRIVY_DB_REPOSITORY: ${{ steps.login_ecr.outputs.registry }}/trivy-db-public-ecr/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: ${{ steps.login_ecr.outputs.registry }}/trivy-db-public-ecr/aquasecurity/trivy-java-db:1
        with:
          image-ref: ${{ env.local_docker_image }}
          severity: "HIGH,CRITICAL"
          format: "sarif"
          output: ${{ env.sarif_file }}
      - name: Trivy scan upload to github
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ env.sarif_file }}
      ######
      ## Push to ECR
      ######
      - name: Push Container
        env:
          SEMVER_TAG: ${{ needs.semver_tag.outputs.tag }}
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          ECR_REPOSITORY: sirius/scanning/app
        run: |
          docker tag ${{ env.local_docker_image }} $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.SEMVER_TAG }}
          if [ "${{ needs.branch_name.outputs.branch_name }}" == "main" ]; then
            docker tag ${{ env.local_docker_image }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
            docker tag ${{ env.local_docker_image }} $ECR_REGISTRY/$ECR_REPOSITORY:main-${{ env.SEMVER_TAG }}
            docker tag ${{ env.local_docker_image }} $ECR_REGISTRY/$ECR_REPOSITORY:main-${{ env.SEMVER_TAG }}-$(date +"%Y%m%d%H%M%S")
            docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          else
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.SEMVER_TAG }}
          fi

  push-version:
    name: Push Version to Parameter Store & Trigger Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [branch_name, workspace_name, semver_tag, build_scan_push]
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::997462338508:role/sirius-actions-ci
          role-duration-seconds: 3600
          role-session-name: OPGScanningWorkflowGithubAction

      - name: Install AWS CLI
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1

      - name: Push Tag to Parameter Store
        run: |
          aws ssm put-parameter --name "opg-scanning-latest-green-build" --type "String" --value "${{ needs.semver_tag.outputs.tag }}" --overwrite --region=eu-west-1

      - name: Trigger Dev Deploy
        shell: bash
        run: curl -u ${{ secrets.JENKINS_API_USER }}:${{ secrets.JENKINS_API_TOKEN }} "https://${{ secrets.JENKINS_URL }}/job/Sirius/job/Deploy_to_Development/build?token=${{ secrets.JENKINS_API_TOKEN_NAME }}&cause=Triggered+by+opg-scanning"
